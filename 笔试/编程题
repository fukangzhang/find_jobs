国企类型的更简单甚至都没有，互联网厂则考察较难也较多。

都是套路，刷过就会做题，没刷的难题就不会。
记录模板，自己训练然后使用熟练。
语言：js，java，python，c/c++。有些考试提供的语言可能没js或者其他的语言，但是大部分都有，害怕这种情况的可以多练习一个语言(感觉没有必要)。

刷题思路：（来自leecode上一个回答）
1、匀速前进是 “归纳流” 最核心的思想之一。按照我个人的经验，即便是 full-time 刷题想要快速脱产，一天的题量也绝对不要超过 5 ~ 6 题，如果是 part-time，标准大约减半。
我个人的节奏是一般是一天 4 ~ 5 题，早上两题，写完休息。下午再做两题，并且复习早上做的题，写完再休息。晚上只做一题或者一题都不做，利用全部时间来 复习归纳 一整天做的题。
通俗地讲，归纳 其实就是尝试在众多同类事物之间挖掘普遍规律，并试图利用该规律去高效地解决更多同类问题。到此，你应该能够读出进行归纳总结的前提条件是先聚集特定数量的 "同类事物"。
换句话说，刷题一定要同类型题目一起刷，切忌各种题型混在一起乱刷。比如，我想攻克二分法类题型，那么我这几天甚至这一周就应该全部做二分法相关的题。随着时间的推移，你会慢慢领悟到，在进行了大量针对性的同类型训练后，隐藏在事物深层的普遍规律往往会自然而然地浮出表面。倘若此时能够停下片刻，对其进行归纳和总结，我们得到的 benefit 将会是在各种题型之间盲目切换的数倍。
形成长期记忆的方法其实非常简单，即 频繁且有效的重复刺激。复习旧题的重要性要远远大于做新题。
2、我个人的复习规律是每 2 小时，12小时， 2天， 7天，15天，一个月， 三个月。这也是为什么我在上文提及到我会将一天分为早上，中午和晚上三个学习区段，每一个区段只刷很少数量的题 （1 ~ 2题），并且开始每一个区段之前，都会首先复习之前做过的题，晚上的时候甚至一题也不做，将全部精力都用来复习。
再结合运用之前介绍的归纳法，我同时也具备了一定的 generalization 的能力。所以遇见同类型的题目，即便不可以在有限时间内 bug-free 的写完（比如我面试的最后一道 hard 题 282），也能做个八九不离十，并且把思路讲得非常清楚（而这往往是很多公司更为看重的）。
3、不要再沉迷于各种伪群体，伪社区，洗脑短视频之间，最好的方式就是离开它们，或者有效控制它们，从而捍卫你的初心。
那么什么样的状态或者是心态可以称之为平稳呢？私认为只要你可以做到 长时间地保持一个节奏，贯彻一个方案，不因取得阶段性成就而大喜，亦不因遭受阶段性挫折而大悲，心静如水，那么你离你的目标就真的不再遥远了。

在线oj：
推荐二选一：https://leetcode.cn/   https://www.nowcoder.com/ta/classic-code
http://hihocoder.com/
https://www.cs.usfca.edu/~galles/visualization/Algorithms.html
https://www.patest.cn/company
https://codeforces.com/
https://zoj.pintia.cn/home/news

